package net.mandomc.mandomcremade.listeners;

import net.mandomc.mandomcremade.MandoMCRemade;
import net.mandomc.mandomcremade.utility.Messages;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.entity.*;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.CreatureSpawnEvent;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.inventory.BrewEvent;
import org.bukkit.event.player.PlayerInteractEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerTeleportEvent;

public class ExploitListener implements Listener {

    private final MandoMCRemade plugin;

    public ExploitListener(MandoMCRemade plugin) {
        this.plugin = plugin;
    }

    @EventHandler
    public void onPlace(BlockPlaceEvent event) {
        Player player = event.getPlayer();
        Block block = event.getBlockPlaced();
        Material type = block.getType();

        switch (type) {
            case END_CRYSTAL:
                handleBlockedBlock(event, player, "mmc.blacklist.endcrystal");
                break;
            case END_PORTAL_FRAME:
                handleBlockedBlock(event, player, "mmc.blacklist.endportalframe");
                break;
            case BEDROCK:
                handleBlockedBlock(event, player, "mmc.blacklist.bedrock");
                break;
            case BEACON:
                handleBlockedBlock(event, player, "mmc.blacklist.bedrock");
                break;
        }
    }

    private void handleBlockedBlock(BlockPlaceEvent event, Player player, String permission) {
        if (!player.hasPermission(permission)) {
            event.setCancelled(true);
            Messages.msg(player, "&cThis block is banned from being used!");
        }
    }

    @EventHandler
    public void onClick(PlayerInteractEvent event) {
        Player player = event.getPlayer();

        if (event.getAction() == Action.RIGHT_CLICK_BLOCK && player.getItemInUse() != null &&
                !player.hasPermission("mmc.blacklist.musicdiscs") &&
                player.getItemInUse().getType().name().contains("MUSIC_DISC")) {
            event.setCancelled(true);
            Messages.msg(player, "&cThis feature is temporarily disabled!");
        }
    }

    @EventHandler
    public void onEntityClick(PlayerInteractEntityEvent event) {
        Player player = event.getPlayer();
        EntityType entityType = event.getRightClicked().getType();

        if (entityType == EntityType.END_CRYSTAL && !player.hasPermission("mmc.blacklist.endcrystal")) {
            event.setCancelled(true);
        }

        if (plugin.getConfig().getBoolean("Villagers") && entityType == EntityType.VILLAGER) {
            event.setCancelled(true);
            Messages.msg(player, "&cVillagers are disabled!");
        }
    }

    @EventHandler
    public void brew(BrewEvent event) {
        event.setCancelled(true);
    }

    @EventHandler
    public void onSpawn(CreatureSpawnEvent event) {
        if (event.getEntity() instanceof Phantom && event.getSpawnReason() == CreatureSpawnEvent.SpawnReason.NATURAL) {
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void onTeleport(PlayerTeleportEvent event) {
        if (event.getCause() == PlayerTeleportEvent.TeleportCause.ENDER_PEARL) {
            Player player = event.getPlayer();
            if (!player.hasPermission("mmc.blacklist.enderpearls")) {
                event.setCancelled(true);
                Messages.msg(player, "&cEnderpearls are disabled!");
            }
        }
    }

    @EventHandler
    public void damage(EntityDamageEvent event) {
        if (plugin.getConfig().getBoolean("EnderCrystal") && event.getEntity().getType() == EntityType.END_CRYSTAL) {
            event.setCancelled(true);
        }
    }
}
